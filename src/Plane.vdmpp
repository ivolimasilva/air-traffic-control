class Plane

	types
		public Direction = <N>|<NE>|<E>|<SE>|<S>|<SW>|<W>|<NW>|<X>;
		public Position ::
			x : nat
			y : nat;
		public Directions ::
			x : real
			y : real;

	instance variables
		private speed : real;
		private pos : Position;
		private dir : Directions;
		private dest : seq of Position := [];

	inv
		speed <= 1;

	operations

		-- Construtor of the plane class
		public Plane : real * nat * nat ==> Plane
			Plane(initial_speed, pos_x, pos_y) == (
				speed := initial_speed;
				pos := mk_Position(pos_x, pos_y);
				dir := mk_Directions(0, 0);
			);

		-- Operation to set current speed of the plane
		public setSpeed : real ==> ()
			setSpeed(new_speed) == (
				speed := new_speed;
			);

		-- Operation to get current speed of the plane
		public getSpeed : () ==> int
			getSpeed() == (
				return speed;
			);

		-- Operation to get current position of the plane
		public getPosition : () ==> Position
			getPosition() == (
				return pos;
			);

		-- Operation to get current directions of the plane
		public getDirections : () ==> Directions
			getDirections() == (
				return dir;
			);

		-- Operation to get current direction of the plane
		public getDirection : () ==> Direction
			getDirection() == (
				return calcDirSymbol(dir.x, dir.y);
			);

		-- Operation to set a destination to the plane
		public setDestination : nat * nat ==> ()
			setDestination(pos_x, pos_y) == (
				dcl aux_dir : Directions;
				-- update destination
				dest := [mk_Position(pos_x, pos_y)] ^ dest;

				-- update direction
				dir.x := pos_x - pos.x;
				dir.y := pos_y - pos.y;
				
				if (dir <> mk_Directions(0, 0))
				then (
					-- unit direction
					aux_dir := dir;
					dir.x := floor (aux_dir.x / MATH`sqrt(aux_dir.x * aux_dir.x + aux_dir.y * aux_dir.y));
					dir.y := floor (aux_dir.y / MATH`sqrt(aux_dir.x * aux_dir.x + aux_dir.y * aux_dir.y));
				)
			)
			post len dest > 0;

		-- Operation to add a destination to the plane
		public addDestination : nat * nat ==> seq of Position
			addDestination(pos_x, pos_y) == (
				dest := dest ^ [mk_Position(pos_x, pos_y)];
				return dest;
			)
			post repeatedDest(dest);

		-- Operation to add a destination for the plane to go to the beacon
		public goToBeacon : Beacon ==> ()
			goToBeacon(beacon) == (
				dest := dest ^ [mk_Position(beacon.getPosition().x, beacon.getPosition().y)];
			);

		-- Operation to add a destination for the plane to go to the airport
		public goToAirport : Airport ==> ()
			goToAirport(airport) == (
				if (airport.getDirection() = <N>)
				then
					dest := dest ^ [mk_Position(airport.getPosition().x, airport.getPosition().y - 1)]
				else if (airport.getDirection() = <S>)
				then
					dest := dest ^ [mk_Position(airport.getPosition().x, airport.getPosition().y + 1)]
				else if (airport.getDirection() = <E>)
				then
					dest := dest ^ [mk_Position(airport.getPosition().x - 1, airport.getPosition().y)]
				else if (airport.getDirection() = <W>)
				then
					dest := dest ^ [mk_Position(airport.getPosition().x + 1, airport.getPosition().y)];

				dest := dest ^ [mk_Position(airport.getPosition().x, airport.getPosition().y)];
			);

		-- Operation to get a destination to the plane
		public getDestination : () ==> seq of Position
			getDestination() == (
				return dest;
			);

		-- Operation to get the plane to move for this round
		public move : () ==> ()
			move() == (
				dcl aux_dir : Directions;

				-- check if plane has any more destinations
				if (dest = [])
				then
					return;

				-- check if plane reached destination
				if (pos.x = (hd dest).x and pos.y = (hd dest).y)
				then (
					dest := tl dest;
					dir := mk_Directions(0, 0);

					-- check if plane has any more destinations
					if (dest = [])
					then
						return;
				);

				-- update direction
				dir.x := (hd dest).x - pos.x;
				dir.y := (hd dest).y - pos.y;

				if (dir = mk_Directions(0, 0))
				then
					return;

				-- unit direction
				aux_dir := dir;
				dir.x := floor (aux_dir.x / MATH`sqrt(aux_dir.x * aux_dir.x + aux_dir.y * aux_dir.y));
				dir.y := floor (aux_dir.y / MATH`sqrt(aux_dir.x * aux_dir.x + aux_dir.y * aux_dir.y));

				-- update position
				pos.x := pos.x + floor (dir.x * speed);
				pos.y := pos.y + floor (dir.y * speed);

				-- return the new position
				return;

			)
			pre len dest >= 0;

	functions

		-- Function to return the symbol of a given direction
		private calcDirSymbol : real * real -> Direction
			calcDirSymbol(dir_x, dir_y) == (
				if (dir_x = 1 and dir_y = 0)
					then <E>
				else if (dir_x = 1 and dir_y = 1)
					then <NE>
				else if (dir_x = 0 and dir_y = 1)
					then <N>
				else if (dir_x = -1 and dir_y = 1)
					then <NW>
				else if (dir_x = -1 and dir_y = 0)
					then <W>
				else if (dir_x = -1 and dir_y = -1)
					then <SW>
				else if (dir_x = 0 and dir_y = -1)
					then <S>
				else if (dir_x = 1 and dir_y = -1)
					then <SE>
				else
					<X>
			);

		-- Function to check if a elem is in a seq
		private elemInSeq : Position * seq of Position -> bool
			elemInSeq(elem, sequence) == (
				if sequence = []
				then
					false
				else if sequence(0) = elem
				then
					true
				else
					elemInSeq(elem, tl sequence)
			);

		-- Function to check if a destination is repeated
		private repeatedDest : seq of Position -> bool
			repeatedDest(dest) == (
				if (tl dest) = []
				then
					true
				else if elemInSeq(hd dest, tl dest)
				then
					false
				else
					repeatedDest(tl dest)
			);

end Plane