class Radar

	types
		public Position ::
			x : nat
			y : nat;

	instance variables
		private radius : nat1;
		private pos : Position;
		private dest : Position;
		private redirect : bool := false;

	inv
		radius > 0;

	operations

		-- Construtor of the Radar class
		public Radar : nat * nat * nat1 ==> Radar
			Radar(pos_x, pos_y, rad) == (
				pos := mk_Position(pos_x, pos_y);
				dest := mk_Position(pos_x, pos_y);
				radius := rad;
			);

		-- Operation to set a destination to redirect all planes in the area
		public setDestination : nat * nat ==> ()
			setDestination(pos_x, pos_y) == (
				dest := mk_Position(pos_x, pos_y);
				redirect := true;
			);

		-- Operation to the radar stop redirections
		public stopDestination : () ==> ()
			stopDestination() == (
				redirect := false;
			);

		-- Operation to get current position of the radar
		public getPosition : () ==> Position
			getPosition() == (
				return pos;
			);

		-- Operation to get radius of the radar
		public getRadius : () ==> nat1
			getRadius() == (
				return radius;
			);

		-- Operation to check if plane is in this radar area
		public isInArea : Plane ==> bool
			isInArea(plane) == (
				if plane.getPosition().x >= (pos.x - radius)
					and plane.getPosition().x <= (pos.x + radius)
					and plane.getPosition().y >= (pos.y - radius)
					and plane.getPosition().y <= (pos.y + radius)
				then
					return true
				else
					return false;
			);

		-- Operation to redirect all planes in the area to somewhere
		public takeEffect : Plane ==> ()
			takeEffect(plane) == (
				if (redirect = true)
				then
					plane.setDestination(dest.x, dest.y);
			);

end Radar