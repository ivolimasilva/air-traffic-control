class Airspace

	types
		public Size ::
				x : nat
				y : nat;

	values
	-- TODO Define values here

	instance variables
		private size : Size;
		private radars : seq of Radar := [];
		private beacons : seq of Beacon := [];
		private airports : seq of Airport := [];
		private planes : seq of Plane := [];

	operations

		-- Construtor of the airspace
		public Airspace : nat * nat ==> Airspace
			Airspace(size_x, size_y) == (
				size := mk_Size(size_x, size_y);
			);

		-- Operation to add radars
		public addRadar : Radar ==> ()
			addRadar(radar) == (
				radars := radars ^ [radar];
			);

		-- Operation to add beacons
		public addBeacon : Beacon ==> ()
			addBeacon(beacon) == (
				beacons := beacons ^ [beacon];
			);

		-- Operation to add airports
		public addAirport : Airport ==> ()
			addAirport(airport) == (
				airports := airports ^ [airport];
			);

		-- Operation to add planes
		public addPlane : Plane ==> ()
			addPlane(plane) == (
				planes := planes ^ [plane];
			);

	functions
	-- TODO Define functiones here

	traces
	-- TODO Define Combinatorial Test Traces here

end Airspace