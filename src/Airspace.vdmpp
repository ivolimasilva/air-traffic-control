class Airspace

	types
		public Building = <Airport> | <Beacon> | <Radar> | <None>;
		public Position ::
			x : nat
			y : nat;
		public Size ::
			x : nat
			y : nat;
		public cell ::
			controlled : bool
			building : Building;

	instance variables
		private minSpace : nat1 := 2;
		private size : Size;
		private area : seq of seq of cell := [];
		private radars : seq of Radar := [];
		private beacons : seq of Beacon := [];
		private airports : seq of Airport := [];
		private planes : seq of Plane := [];

	operations

		-- Construtor of the airspace
		public Airspace : nat * nat ==> Airspace
			Airspace(size_x, size_y) == (
				size := mk_Size(size_x, size_y);

				for i = 0 to size_x by 1 do
					for j = 0 to size_y by 1 do (
						area(i)(j).building := <None>;
						area(i)(j).controlled := false;
					);
			);

		-- Operation to add radars
		public addRadar : Radar ==> ()
			addRadar(radar) == (
				radars := radars ^ [radar];
				area(radar.getPosition().x)(radar.getPosition().y).building := <Radar>;
				for i = 0 to size.x by 1 do
					for j = 0 to size.y by 1 do (
						area(i)(j).building := <None>;
						area(i)(j).controlled := false;
					);
			)
			pre inLimits(radar, size);

		-- Operation to add beacons
		public addBeacon : Beacon ==> ()
			addBeacon(beacon) == (
				beacons := beacons ^ [beacon];
			)
			pre inLimits(beacon, size);

		-- Operation to add airports
		public addAirport : Airport ==> ()
			addAirport(airport) == (
				airports := airports ^ [airport];
			)
			pre inLimits(airport, size);

		-- Operation to add planes
		public addPlane : Plane ==> ()
			addPlane(plane) == (
				planes := planes ^ [plane];
			)
			pre inLimits(plane, size);

		-- Operation to look out for collisions between planes
		public handleCollisions : () ==> ()
			handleCollisions() == (
				for i = 0 to len planes by 1 do
					for j = i + 1 to len planes by 1 do
						if abs (planes(i).getPosition().x - planes(j).getPosition().x) < minSpace
						then
							planes(i).setSpeed(0.5);
			);

		-- Operation to tick planes
		public tickPlanes : () ==> ()
			tickPlanes() == (
				for i = 0 to len planes by 1 do (
					planes(i).move();
				);
			);

		-- Operation to tick radars
		public tickRadars : () ==> ()
			tickRadars() == (
				for i = 0 to len radars by 1 do (
					for j = 0 to len planes by 1 do (
							if radars(i).isInArea(planes(j))
							then
								radars(i).takeEffect(planes(j));
						);
				);
			);

	functions

		-- check if object is in map limits
		private inLimits : ? * Size -> bool
			inLimits(building, size) == (
				if building.getPosition().x < size.x
					and building.getPosition().y < size.y
				then
					true
				else
					false
			);

	traces
	-- TODO Define Combinatorial Test Traces here

end Airspace