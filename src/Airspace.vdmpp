class Airspace

	types
		public Position ::
			x : nat
			y : nat;
		public Size ::
			x : nat
			y : nat;

	instance variables
		private minSpace : nat1 := 2;
		-- private size : Size;
		private area : map Radar`Position to nat1 := {|->};
		private radars : seq of Radar := [];
		private beacons : seq of Beacon := [];
		private airports : seq of Airport := [];
		private planes : seq of Plane := [];

	operations

		-- Operation to add radars
		public addRadar : Radar ==> ()
			addRadar(radar) == (
				radars := radars ^ [radar];
				area := area munion {radar.getPosition() |-> radar.getRadius()};
			);

		-- Operation to add beacons
		public addBeacon : Beacon ==> ()
			addBeacon(beacon) == (
				beacons := beacons ^ [beacon];
			);

		-- Operation to add airports
		public addAirport : Airport ==> ()
			addAirport(airport) == (
				airports := airports ^ [airport];
			);

		-- Operation to add planes
		public addPlane : Plane ==> ()
			addPlane(plane) == (
				planes := planes ^ [plane];
			);

		-- Operation to look out for collisions between planes
		public handleCollisions : () ==> ()
			handleCollisions() == (
				for i = 1 to len planes by 1 do
					for j = i + 1 to len planes by 1 do
						if (abs (planes(i).getPosition().x - planes(j).getPosition().x)) < minSpace
						then
							planes(i).setSpeed(0.5);
			);

		-- Operation to tick planes
		public tickPlanes : () ==> ()
			tickPlanes() == (
				for i = 1 to len planes by 1 do (
					planes(i).move();
				);
			);

		-- Operation to tick radars
		public tickRadars : () ==> ()
			tickRadars() == (
				for i = 1 to len radars by 1 do (
					for j = 1 to len planes by 1 do (
							if radars(i).isInArea(planes(j))
							then
								radars(i).takeEffect(planes(j));
						);
				);
			);

end Airspace