class Airport
	types
		public Direction = <N>|<E>|<S>|<W>|<X>;
		public Position ::
			x : nat
			y : nat;

	instance variables
		private pos : Position;
		private dir : Direction;
		private cap : nat;
		private planes : seq of Plane := [];

	operations

		-- construtor of Airport class
		public Airport : Direction * nat * nat * nat ==> Airport
			Airport(direction, pos_x, pos_y, capacity) == (
				pos := mk_Position(pos_x, pos_y);
				dir := direction;
				cap := capacity;
			);

		-- Operation to get position of the airport
		public getPosition : () ==> Position
			getPosition() == (
				return pos;
			);

		-- Operation to get direction of the airport
		public getDirection : () ==> Direction
			getDirection() == (
				return dir;
			);

		-- Operation to land a Plane in the airport
		public addPlane : Plane ==> ()
			addPlane(plane) == (
				planes := planes ^ [plane];
			)
			post len planes < cap;

		-- Operation to get planes on that airport
		public getPlanes : () ==> seq of Plane
			getPlanes() == (
				return planes;
			);

end Airport